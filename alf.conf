#a

alfedit: nano ~/Proyectos/alf-conf/alf.conf
alfsave: alf save &>/dev/null && source ~/.bash_aliases && echo "Alias actualizados"

all-groups: cut -d: -f1 /etc/group | sort

# install from local .deb package
apt-deb: sudo apt-get -yf install "./$1"

# cd to next/prev sibling
cdnext: cd ../"$(ls -F .. | grep '/' | grep -A1 -xF "${PWD##*/}/" | tail -n 1)"
cdprev: cd ../"$(ls -F .. | grep '/' | grep -B1 -xF "${PWD##*/}/" | head -n 1)"

cert-refresh: sudo update-ca-certificates --fresh 

cls: clear

# Count files in folder. Folder name is optional
count: find ${1:-.} -type f | wc -l

# Count files of a given extension in subfolders
countof: find . -name "*.$1" | wc -l

ctop: ctop -i

cualesmiip: curl icanhazip.com
  local: ! hostname -I | awk '{print $1}'


#d

decrypt: gpg2 -d
  forget: !echo RELOADAGENT | gpg-connect-agent

dfh: df -h |grep 'Filesystem\|/$'

diagram: dot "$1" -Tpng -o "${1%.dot}.png"

dif: diff -u --color

dirfind: sudo find . -maxdepth ${2:-3} -type d -name "*$1*"

dns: if [[ -n "$2" ]]; then host -t $2 $1; else host $1; fi
  flush: !sudo systemd-resolve --flush-caches
  stats: !sudo systemd-resolve --statistics
  --flush: !dns flush && dns
  help: !echo -e "Usage:\n  dns example.com\n  dns example.com mx\n  dns --flush example.com\n  dns flush\n  dns stats"

fonts: !
  ls: fc-list
  reload: fc-cache -f -v
  install: sudo cp -r $1 /usr/share/fonts/truetype/
  help: !echo -e "Usage:\n  fonts ls              # show list of fonts\n  fonts reload          # refresh cache after installing new fonts\n  fonts install dejavu  # copy the ./dejavu dir to the system fonts dir"

#g
gituser: git config --global user.name && git config --global user.email

g: git
  # basic
  b: branch
  c: add . --all && git commit -am
  d: diff --unified=0
  m: merge
  p: push
  s: status
  co: checkout
  pl: pull

  # commonly used
  cl: changelog
  tags: tag --sort v:refname
  new: checkout -b
  del: branch -d
  chmod: update-index --chmod 
  retag: tag $1 -f && (git push origin --delete $1 || true) && git push origin $1
  discard: checkout -- . ; git clean -fd
  remote-delete: push origin --delete
  rebuild: commit --allow-empty -m "trigger rebuild" ; git push
  rename: branch -m
  rollback: diff --binary HEAD $1 | git apply
  unstash: stash pop
  checkout-pr: fetch origin pull/$1/head:pr/$1 && git checkout pr/$1

  # mark current directory as safe unless already marked
  safe: ! (git config --global -l |grep "safe.directory=$(pwd -P)$") || (git config --global --add safe.directory "$(pwd -P)" && echo added "$(pwd -P)")

  # log related
  l: log --all --graph --date=relative --pretty=format:'%h %Cgreen%ad%Creset %Cblue%an%Creset%n        %s%n       %C(auto)%d%Creset'
  ll: log --graph --oneline --decorate --all
  tail: log -${1:-5} --all --date=relative --pretty=format:'%h %Cgreen%ad%Creset %x09%Cblue%s%Creset'
  datelog: log --pretty=format:'%C(cyan)%h %C(magenta)%ad %C(blue)%an%Creset%x09%s' --date=short
  history: log -p
  
  # less commonly used
  ls: ls-tree --full-name --name-only -r HEAD
  compare: diff --stat --color $1..HEAD
  # optimize: repack -ad && sleep 4 && git gc --aggressive --prune=now
  resolve-ours: checkout --ours . ; git add -u ; git commit -m 'resolve conflicts with --ours'
  resolve-theirs: checkout --theirs . ; git add -u ; git commit -m 'resolve conflicts with --theirs'
  shallow-clone: clone --depth 1
  tagsha: show-ref --abbrev=7 --tags
  sha: rev-parse --short HEAD
  diff-list: diff --name-status "${1:-master}"
  stats: diff --shortstat
  unstage: restore --staged
  
  # git add-upstream user/repo
  add-upstream: remote add upstream https://github.com/$1.git
  fetch-upstream: checkout master && git fetch upstream && git merge upstream/master

  # show age of all git repos in subdirectories
  age: !for d in ./*/; do echo -e "\n\e[34m$d\e[0m" ; git -C $d log -1 --all --date=relative --pretty=format:'%Cgreen%ad%Creset %x09%s%n' ; done;

gg: g p
ggt: gg && gg --tag
gpl: g pl
ggc: g c "$*" && gg

geoip: curl http://ip-api.com/line/$1

# GitHub API - example usage: github /user/repos
github: curl -H "Authorization: token $GITHUB_ACCESS_TOKEN" https://api.github.com$1

# add self to group $1
groupme: sudo usermod -aG "$1" "$(whoami)" && groups

#h

hawk: filewatcher -I "$1" "./$1"

historydel: for ((i = 1 ; i <= ${1:-1} ; i++)); do echo "clearing line $(($HISTCMD-2)): $(history -p \!$(($HISTCMD-2)))"; history -d $(($HISTCMD-2)); done; history -d $(($HISTCMD-1))

https: http ${@:1:$((${#@}-1))} https://${@: -1}

#i

# implode files to one: implode indir glob outfile
implode: find "$1" -name "$2" -print0 |xargs -0 -I file cat file > "$3"
inst: sudo apt -y install

# get files from ipfs
ipfsget: wget "https://ipfs.io/ipfs/$1"

#k

killport: [[ $(lsof -ti:$1) ]] && kill -9 $(lsof -ti:$1)

#l

l: ls -lh
ll: ls -lah
less: less -Sr

# create or show manual timestamped log
log: if [[ "$1" == "" ]]; then cat log.log 2> /dev/null; else echo -e "$(date) : $*" >> log.log ; cat log.log; fi

#m

manlocal: cat "$1" | man -l -
mdman: pandoc -s --to man $1 | man -l -
mem: watch free -h

# run a git command in all direct subdirectories
mgit: find -maxdepth 1 -mindepth 1 -type d -exec echo -e "\n=== {}" \; -exec git -C "{}" "$@" \;

monitor: gotop -l minimal


murder: sudo pkill -9

#n

nameserver: systemd-resolve --status |head -n3
network: sudo lshw -class network -short
nikto: docker run --rm -it -v "$PWD:/out" --network host dannyben/nikto "$@"
nv: env |grep -i

#o

outdated: /usr/lib/update-notifier/apt-check --human-readable && echo "Run 'outdated list' to show upgradable packages"
  list: !apt list --upgradable

#p

# List installed perl modules
perlmod: perl -MFile::Find=find -MFile::Spec::Functions -Tlwe 'find { wanted => sub { print canonpath $_ if /\.pm\z/ }, no_chdir => 1 }, @INC'

phpversion: sudo update-alternatives --config php && restart apache && echo -ne "Versión de " && php -v | grep '(cli)' | cut  -d '(' -f -1 && echo "¡ACTIVADA!"

port: sudo lsof -i :$1

# ports: show open ports
# ports -v: show with process name
ports: sudo netstat -tulpn |grep LISTEN |grep -Po '(?<=:)(\d{2,5})' |sort -n  |uniq |tr '\n' '\t'
  -v: !sudo netstat -tulpn |grep LISTEN |perl -ne 'print "$1\t$2\n" if /.*:(\d{2,5}).*\/(\w+)/' |sort -n| uniq

psf: ps -ef |grep 

pt: papertrail
ppt: PAPERTRAIL_API_TOKEN=$PERSONAL_PAPERTRAIL_API_TOKEN pt

py: python3

#r
restart: !
  apache: sudo service apache2 restart | echo "Apache Reiniciado Correctamente"
  help: !echo -e "Usage:\n  restart apache\n"

rcop: rubocop
  server: !if [[ "$1" == "stop" ]]; then rubocop --stop-server; else rubocop --start-server; fi
  fix: --autocorrect
  todo: --regenerate-todo
  docs: --show-docs-url
  only: --only

redis: redis-cli

# Convert the last N history commands to a bash script named ./redo
# usage: redo 10
redo: echo "#!/usr/bin/env bash" > redo && history $(($1 + 1)) | cut -c 8- | head -n -1 >> redo && cat redo

# Show information about a github repo - usage: repo-info user/repo
repo-info: curl -s https://api.github.com/repos/$1 | jq '{name: .full_name, forks: .forks_count, stars: .stargazers_count, watchers: .watchers_count, issues: .open_issues_count, subscribers: .subscribers_count}'

# Run rspec only on the files updated in the last N minutes [default: 10]
# usage: respec N
respec: m="${1:-10}" && echo -e "\n\e[33mrespec: $m minutes\e[0m" && bundle exec rspec $((find -name '*_spec.rb' -mmin -$m | grep .) || echo "-tnothing")

runas: sudo su -s /bin/sh $1 -c "$2"

#s

sad: ssh-add

search: grep -ri

secret: openssl rand -hex 64

senderscore: echo $1 | awk -F . '{print $4"."$3"."$2"."$1".score.senderscore.com"}' | xargs -I{} dig a {} +short | xargs -I{} echo {} | cut -d . -f 4

# shortcut: test -e "$HOME/shortcuts/${1:-$(basename "$PWD")}" || ln -s "$PWD" "$HOME/shortcuts/${1:-$(basename "$PWD")}"

slim: slimrb --pretty

slurp: wget --recursive --no-clobber --level=${2:-10} --page-requisites --adjust-extension --convert-links --restrict-file-names=windows --no-parent http://$1

sshconf: nano ~/.ssh/config

# mount/unmount folders by sshfs
# usage: ssh-mount server:/path [local-path]
# usage: ssh-unmount [local-path]
ssh-mount: dir="${2:-./mount}" && mkdir -p "$dir" && sshfs "$1" "$dir" && echo "mounted in $dir"
ssh-unmount: dir="${1:-./mount}" && fusermount -u "$dir" && rmdir "$dir"

ssh-testkey: ssh-keygen -t rsa -C "bobbo@henna.com" -f id_rsa -N ''

sslyze: docker run --rm -it nablac0d3/sslyze

st: /opt/sublime_text/sublime_text 

syslog: sudo grc tail -f /var/log/syslog

# tracert: sudo traceroute -I 
tracert: mtr

triplet: gcc -dumpmachine

# touch files modified within the last 10 minutes ($1)
touches: fd --changed-within ${1:-10m} --exec-batch touch

# start http tunnel
# usage: tunnel server [local-port remote-port]
tunnel: echo "localhost:${2:-3000} => $1:${3:-80}" ; ssh -nNT -L 0.0.0.0:${2:-3000}:localhost:${3:-80} $1

#u

uninst: sudo apt -y remove

uml: java -jar /vagrant/java/plantuml/plantuml.jar

update: sudo apt update -y && sudo apt upgrade -y && sudo apt autoremove -y

#v

ver: cat /etc/os-release
vir: vi -R

#w

what: alf which
wiki: wikipedia2text
wsh: readlink /proc/$$/exe

# open any command in a new tmux window or pane
ww: tmux new-window
ws: tmux split-window

#y

y2mp3: youtube-dl --extract-audio --audio-format mp3 "$@"
ytop: ytop --colorscheme default-dark
 

# caps

GET: http GET
POST: http POST
PUT: http POST
HEAD: http -h

